import random
from sympy import isprime, mod_inverse


def generate_prime_candidate(length):
    # Generate random bits
    p = random.getrandbits(length)
    # Apply a mask to set MSB and LSB to 1
    p |= (1 << length - 1) | 1
    return p
def generate_prime_number(length=1024):
    p = 4
    while not isprime(p):
        p = generate_prime_candidate(length)
    return p


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def generate_keypair(bits):
    p = generate_prime_number(bits)
    q = generate_prime_number(bits)
    while q == p:
        q = generate_prime_number(bits)

    n = p * q
    phi = (p - 1) * (q - 1)

    e = random.randrange(1, phi)
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    d = mod_inverse(e, phi)

    return ((e, n), (d, n))


def encrypt(pk, plaintext):
    key, n = pk
    cipher = [pow(ord(char), key, n) for char in plaintext]
    return cipher


def decrypt(pk, ciphertext):
    key, n = pk
    plain = [chr(pow(char, key, n)) for char in ciphertext]
    return ''.join(plain)


# Generate public and private keys
public, private = generate_keypair(8)
print("Public Key: ", public)
print("Private Key: ", private)

# Encrypt the message
message = "HELLO"
encrypted_msg = encrypt(public, message)
print("Encrypted Message: ", encrypted_msg)

# Decrypt the message
decrypted_msg = decrypt(private, encrypted_msg)
print("Decrypted Message: ", decrypted_msg)
